// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i6YZmFxPJB69NEUgdf79ap
// Component: LwABaAx8M7U
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SupabaseUserLogIn } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: JU9EQDDJRV/codeComponent
import { FormContextComponent as FormContextCmpt } from "../../CodeComponents/Form"; // plasmic-import: 2UrJSGrPka/codeComponent
import { FormTextInput } from "../../CodeComponents/Form"; // plasmic-import: vQoSYSmqkH/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: MOtQKDo7pjt/component
import Button from "../../Button"; // plasmic-import: FxlqSR0w1LL/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_supabase.module.css"; // plasmic-import: i6YZmFxPJB69NEUgdf79ap/projectcss
import sty from "./PlasmicLoginComponent2.module.css"; // plasmic-import: LwABaAx8M7U/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: XmdWhoAJpZ3/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: GGOD9JgJAWO/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: CDIHNTS3AqM/icon

export type PlasmicLoginComponent2__VariantMembers = {
  isSignUp: "isSignUp";
  error: "error";
};

export type PlasmicLoginComponent2__VariantsArgs = {
  isSignUp?: SingleBooleanChoiceArg<"isSignUp">;
  error?: SingleBooleanChoiceArg<"error">;
};

type VariantPropType = keyof PlasmicLoginComponent2__VariantsArgs;
export const PlasmicLoginComponent2__VariantProps = new Array<VariantPropType>(
  "isSignUp",
  "error"
);

export type PlasmicLoginComponent2__ArgsType = {
  errorMessage?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLoginComponent2__ArgsType;
export const PlasmicLoginComponent2__ArgProps = new Array<ArgPropType>(
  "errorMessage"
);

export type PlasmicLoginComponent2__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  supabaseUserLogIn?: p.Flex<typeof SupabaseUserLogIn>;
  formContextCmpt?: p.Flex<typeof FormContextCmpt>;
  button?: p.Flex<typeof Button>;
  switchSignInOrSignUp?: p.Flex<"div">;
  span?: p.Flex<"span">;
};

export interface DefaultLoginComponent2Props {
  errorMessage?: React.ReactNode;
  isSignUp?: SingleBooleanChoiceArg<"isSignUp">;
  error?: SingleBooleanChoiceArg<"error">;
  className?: string;
}

function PlasmicLoginComponent2__RenderFunc(props: {
  variants: PlasmicLoginComponent2__VariantsArgs;
  args: PlasmicLoginComponent2__ArgsType;
  overrides: PlasmicLoginComponent2__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      {true ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__dcMTl, {
            [sty.freeBoxerror__dcMTlvTBec]: hasVariant(
              variants,
              "error",
              "error"
            )
          })}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textisSignUp]: hasVariant(variants, "isSignUp", "isSignUp")
              }
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3,
                  {
                    [sty.h3isSignUp]: hasVariant(
                      variants,
                      "isSignUp",
                      "isSignUp"
                    )
                  }
                )}
              >
                {"Supabase Demo"}
              </h3>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
        </div>
      ) : null}

      <SupabaseUserLogIn
        data-plasmic-name={"supabaseUserLogIn"}
        data-plasmic-override={overrides.supabaseUserLogIn}
        className={classNames("__wab_instance", sty.supabaseUserLogIn)}
      >
        <FormContextCmpt
          data-plasmic-name={"formContextCmpt"}
          data-plasmic-override={overrides.formContextCmpt}
          className={classNames("__wab_instance", sty.formContextCmpt)}
          textFields={"" as const}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zp8FK)}
            >
              <FormTextInput
                className={classNames("__wab_instance", sty.formTextInput__eMH)}
                name={"email" as const}
              >
                <TextInput
                  className={classNames("__wab_instance", sty.textInput__rEdFq)}
                  placeholder={"Email" as const}
                />
              </FormTextInput>

              <FormTextInput
                className={classNames(
                  "__wab_instance",
                  sty.formTextInput__tVs2C
                )}
                name={"password" as const}
              >
                <TextInput
                  className={classNames("__wab_instance", sty.textInput__mrzkd)}
                  placeholder={"Password" as const}
                  type={"password" as const}
                />
              </FormTextInput>

              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
              >
                {"Sign in"}
              </Button>
            </p.Stack>
          ) : null}
        </FormContextCmpt>
      </SupabaseUserLogIn>

      {(hasVariant(variants, "error", "error") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__eDx4W, {
            [sty.freeBoxerror__eDx4WvTBec]: hasVariant(
              variants,
              "error",
              "error"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hoN0A
                )}
              >
                {"Error message"}
              </div>
            ),

            value: args.errorMessage,
            className: classNames(sty.slotTargetErrorMessage)
          })}
        </div>
      ) : null}
      {true ? (
        <div
          data-plasmic-name={"switchSignInOrSignUp"}
          data-plasmic-override={overrides.switchSignInOrSignUp}
          className={classNames(projectcss.all, sty.switchSignInOrSignUp)}
        >
          {(hasVariant(variants, "isSignUp", "isSignUp") ? true : true) ? (
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__krxLa,
                {
                  [sty.linkisSignUp__krxLaMye1U]: hasVariant(
                    variants,
                    "isSignUp",
                    "isSignUp"
                  )
                }
              )}
              component={Link}
              platform={"nextjs"}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                <span
                  data-plasmic-name={"span"}
                  data-plasmic-override={overrides.span}
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.span
                  )}
                >
                  {"Don't have an account? Sign up"}
                </span>
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </p.PlasmicLink>
          ) : null}
          {(hasVariant(variants, "isSignUp", "isSignUp") ? true : true) ? (
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ytG6,
                {
                  [sty.linkisSignUp__ytG6Mye1U]: hasVariant(
                    variants,
                    "isSignUp",
                    "isSignUp"
                  )
                }
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"Do you have an account? Sign in"}
            </p.PlasmicLink>
          ) : null}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "text",
    "h3",
    "supabaseUserLogIn",
    "formContextCmpt",
    "button",
    "switchSignInOrSignUp",
    "span"
  ],
  text: ["text", "h3"],
  h3: ["h3"],
  supabaseUserLogIn: ["supabaseUserLogIn", "formContextCmpt", "button"],
  formContextCmpt: ["formContextCmpt", "button"],
  button: ["button"],
  switchSignInOrSignUp: ["switchSignInOrSignUp", "span"],
  span: ["span"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  h3: "h3";
  supabaseUserLogIn: typeof SupabaseUserLogIn;
  formContextCmpt: typeof FormContextCmpt;
  button: typeof Button;
  switchSignInOrSignUp: "div";
  span: "span";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginComponent2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginComponent2__VariantsArgs;
    args?: PlasmicLoginComponent2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginComponent2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLoginComponent2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLoginComponent2__ArgProps,
      internalVariantPropNames: PlasmicLoginComponent2__VariantProps
    });

    return PlasmicLoginComponent2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginComponent2";
  } else {
    func.displayName = `PlasmicLoginComponent2.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginComponent2 = Object.assign(
  // Top-level PlasmicLoginComponent2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    h3: makeNodeComponent("h3"),
    supabaseUserLogIn: makeNodeComponent("supabaseUserLogIn"),
    formContextCmpt: makeNodeComponent("formContextCmpt"),
    button: makeNodeComponent("button"),
    switchSignInOrSignUp: makeNodeComponent("switchSignInOrSignUp"),
    span: makeNodeComponent("span"),

    // Metadata about props expected for PlasmicLoginComponent2
    internalVariantProps: PlasmicLoginComponent2__VariantProps,
    internalArgProps: PlasmicLoginComponent2__ArgProps
  }
);

export default PlasmicLoginComponent2;
/* prettier-ignore-end */
