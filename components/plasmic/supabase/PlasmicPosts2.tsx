// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i6YZmFxPJB69NEUgdf79ap
// Component: bEBmTIEZ6Gq
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: FxlqSR0w1LL/component
import { SupabaseQuery } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: DDim6ivXse/codeComponent
import { SupabaseGridCollection } from "../../CodeComponents/DisplayCollections"; // plasmic-import: SrSCQph3k1/codeComponent
import Post from "../../Post"; // plasmic-import: pm7cbWoDyv/component
import { SupabaseTextField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: f6hHmfgMEx/codeComponent
import { SupabaseImgField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: cKMWaVLS6x/codeComponent
import { SupabaseTableCollection } from "../../CodeComponents/DisplayCollections"; // plasmic-import: WU9IqrCYlG/codeComponent
import { SupabaseDeleteButton } from "../../CodeComponents/UtilsComponents"; // plasmic-import: lUrHrR1sgJ/codeComponent
import { SupabaseMutation } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: MQ9j3Y2T3n/codeComponent
import { SupabaseModal } from "../../CodeComponents/UtilsComponents"; // plasmic-import: wh6q_tDQSX/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_supabase.module.css"; // plasmic-import: i6YZmFxPJB69NEUgdf79ap/projectcss
import sty from "./PlasmicPosts2.module.css"; // plasmic-import: bEBmTIEZ6Gq/css

import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: qxXefYdYN/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: CDIHNTS3AqM/icon
import EditIcon from "./icons/PlasmicIcon__Edit"; // plasmic-import: VtZz2Tcp6/icon
import DeleteIcon from "./icons/PlasmicIcon__Delete"; // plasmic-import: PpzwRy7oA/icon

export type PlasmicPosts2__VariantMembers = {};

export type PlasmicPosts2__VariantsArgs = {};
type VariantPropType = keyof PlasmicPosts2__VariantsArgs;
export const PlasmicPosts2__VariantProps = new Array<VariantPropType>();

export type PlasmicPosts2__ArgsType = {};
type ArgPropType = keyof PlasmicPosts2__ArgsType;
export const PlasmicPosts2__ArgProps = new Array<ArgPropType>();

export type PlasmicPosts2__OverridesType = {
  root?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  button?: p.Flex<typeof Button>;
  supabaseQuery?: p.Flex<typeof SupabaseQuery>;
  supabaseGridCollection?: p.Flex<typeof SupabaseGridCollection>;
  post?: p.Flex<typeof Post>;
  img?: p.Flex<typeof p.PlasmicImg>;
  supabaseTableCollection?: p.Flex<typeof SupabaseTableCollection>;
  supabaseDeleteButton?: p.Flex<typeof SupabaseDeleteButton>;
  supabaseMutation?: p.Flex<typeof SupabaseMutation>;
  supabaseModal?: p.Flex<typeof SupabaseModal>;
};

export interface DefaultPosts2Props {
  className?: string;
}

function PlasmicPosts2__RenderFunc(props: {
  variants: PlasmicPosts2__VariantsArgs;
  args: PlasmicPosts2__ArgsType;
  overrides: PlasmicPosts2__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__nxmSu
        )}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2
            )}
          >
            {"Posts"}
          </h2>
          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </div>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__ef7Sn)}>
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            color={"softSand" as const}
            link={"/post/add" as const}
            showStartIcon={true}
            size={"compact" as const}
            startIcon={
              <PlusIcon
                className={classNames(projectcss.all, sty.svg__kVg0W)}
                role={"img"}
              />
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kg9K
              )}
            >
              {"New Post"}
            </div>
          </Button>
        </div>
      ) : null}

      <SupabaseQuery
        data-plasmic-name={"supabaseQuery"}
        data-plasmic-override={overrides.supabaseQuery}
        className={classNames("__wab_instance", sty.supabaseQuery)}
        columns={"title, content, id, imageUrl" as const}
        tableName={"posts" as const}
      >
        <SupabaseGridCollection
          data-plasmic-name={"supabaseGridCollection"}
          data-plasmic-override={overrides.supabaseGridCollection}
          className={classNames("__wab_instance", sty.supabaseGridCollection)}
          columnGap={50 as const}
          columns={3 as const}
          loading={
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/supabase/images/loading2.gif",
                fullWidth: 200,
                fullHeight: 200,
                aspectRatio: undefined
              }}
            />
          }
          rowGap={30 as const}
          testLoading={false}
        >
          <Post
            data-plasmic-name={"post"}
            data-plasmic-override={overrides.post}
            className={classNames("__wab_instance", sty.post)}
            description={
              <SupabaseTextField
                className={classNames(
                  "__wab_instance",
                  sty.supabaseTextField__dPhDh
                )}
                name={"{{row.content}}" as const}
              />
            }
            image={
              <SupabaseImgField
                className={classNames(
                  "__wab_instance",
                  sty.supabaseImgField__yzPl7
                )}
                url={"{{row.imageUrl}}" as const}
              />
            }
            title={
              <SupabaseTextField
                className={classNames(
                  "__wab_instance",
                  sty.supabaseTextField__pTw6F
                )}
                name={"{{row.title}}" as const}
              />
            }
          />
        </SupabaseGridCollection>

        <SupabaseTableCollection
          data-plasmic-name={"supabaseTableCollection"}
          data-plasmic-override={overrides.supabaseTableCollection}
          canDelete={true}
          canEdit={true}
          className={classNames("__wab_instance", sty.supabaseTableCollection)}
          columns={"title,content,imageUrl" as const}
          customizeEditAndDelete={false}
          deleteSlot={
            <SupabaseDeleteButton
              data-plasmic-name={"supabaseDeleteButton"}
              data-plasmic-override={overrides.supabaseDeleteButton}
              className={classNames("__wab_instance", sty.supabaseDeleteButton)}
              id={"{{row.id}}" as const}
              modal={
                <SupabaseMutation
                  data-plasmic-name={"supabaseMutation"}
                  data-plasmic-override={overrides.supabaseMutation}
                  className={classNames("__wab_instance", sty.supabaseMutation)}
                  filters={[
                    {
                      name: "eq",
                      args: [{ column: "id", value: "{{row.id}}" }]
                    }
                  ]}
                  method={"delete" as const}
                  redirectOnSuccess={"/" as const}
                  tableName={"posts" as const}
                >
                  <SupabaseModal
                    data-plasmic-name={"supabaseModal"}
                    data-plasmic-override={overrides.supabaseModal}
                    className={classNames("__wab_instance", sty.supabaseModal)}
                    showModal={false}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___31BcA
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__d6AvH
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__z0RmY
                          )}
                        >
                          {"Title"}
                        </div>

                        <SupabaseTextField
                          className={classNames(
                            "__wab_instance",
                            sty.supabaseTextField__qhtay
                          )}
                          name={"{{row.title}}" as const}
                        />
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ssRrv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pkjBz
                          )}
                        >
                          {"Content"}
                        </div>

                        <SupabaseTextField
                          className={classNames(
                            "__wab_instance",
                            sty.supabaseTextField__kncI
                          )}
                          name={"{{row.content}}" as const}
                        />
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mbQse
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7KRoK
                          )}
                        >
                          {"Image"}
                        </div>

                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zu8RS
                            )}
                          >
                            <SupabaseImgField
                              className={classNames(
                                "__wab_instance",
                                sty.supabaseImgField__htaM4
                              )}
                              url={"{{row.imageUrl}}" as const}
                            />
                          </div>
                        ) : null}
                      </p.Stack>
                    </div>
                  </SupabaseModal>
                </SupabaseMutation>
              }
            >
              <DeleteIcon
                className={classNames(projectcss.all, sty.svg__pFec5)}
                role={"img"}
              />
            </SupabaseDeleteButton>
          }
          editPage={"/post/update/[id]" as const}
          editSlot={
            <EditIcon
              className={classNames(projectcss.all, sty.svg__p1P5N)}
              role={"img"}
            />
          }
          loading={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zxefe
              )}
            >
              {""}
            </div>
          }
        />
      </SupabaseQuery>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h2",
    "button",
    "supabaseQuery",
    "supabaseGridCollection",
    "post",
    "img",
    "supabaseTableCollection",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal"
  ],
  h2: ["h2"],
  button: ["button"],
  supabaseQuery: [
    "supabaseQuery",
    "supabaseGridCollection",
    "post",
    "img",
    "supabaseTableCollection",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal"
  ],
  supabaseGridCollection: ["supabaseGridCollection", "post", "img"],
  post: ["post"],
  img: ["img"],
  supabaseTableCollection: [
    "supabaseTableCollection",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal"
  ],
  supabaseDeleteButton: [
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal"
  ],
  supabaseMutation: ["supabaseMutation", "supabaseModal"],
  supabaseModal: ["supabaseModal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h2: "h2";
  button: typeof Button;
  supabaseQuery: typeof SupabaseQuery;
  supabaseGridCollection: typeof SupabaseGridCollection;
  post: typeof Post;
  img: typeof p.PlasmicImg;
  supabaseTableCollection: typeof SupabaseTableCollection;
  supabaseDeleteButton: typeof SupabaseDeleteButton;
  supabaseMutation: typeof SupabaseMutation;
  supabaseModal: typeof SupabaseModal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPosts2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPosts2__VariantsArgs;
    args?: PlasmicPosts2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPosts2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPosts2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPosts2__ArgProps,
      internalVariantPropNames: PlasmicPosts2__VariantProps
    });

    return PlasmicPosts2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPosts2";
  } else {
    func.displayName = `PlasmicPosts2.${nodeName}`;
  }
  return func;
}

export const PlasmicPosts2 = Object.assign(
  // Top-level PlasmicPosts2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    button: makeNodeComponent("button"),
    supabaseQuery: makeNodeComponent("supabaseQuery"),
    supabaseGridCollection: makeNodeComponent("supabaseGridCollection"),
    post: makeNodeComponent("post"),
    img: makeNodeComponent("img"),
    supabaseTableCollection: makeNodeComponent("supabaseTableCollection"),
    supabaseDeleteButton: makeNodeComponent("supabaseDeleteButton"),
    supabaseMutation: makeNodeComponent("supabaseMutation"),
    supabaseModal: makeNodeComponent("supabaseModal"),

    // Metadata about props expected for PlasmicPosts2
    internalVariantProps: PlasmicPosts2__VariantProps,
    internalArgProps: PlasmicPosts2__ArgProps
  }
);

export default PlasmicPosts2;
/* prettier-ignore-end */
