// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i6YZmFxPJB69NEUgdf79ap
// Component: eC7JXGexcD
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SupabaseQuery } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: DDim6ivXse/codeComponent
import { SupabaseGridCollection } from "../../CodeComponents/DisplayCollections"; // plasmic-import: SrSCQph3k1/codeComponent
import { SupabaseTextField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: f6hHmfgMEx/codeComponent
import { SupabaseImgField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: cKMWaVLS6x/codeComponent
import { SupabaseDeleteButton } from "../../CodeComponents/UtilsComponents"; // plasmic-import: lUrHrR1sgJ/codeComponent
import { SupabaseMutation } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: MQ9j3Y2T3n/codeComponent
import { SupabaseModal } from "../../CodeComponents/UtilsComponents"; // plasmic-import: wh6q_tDQSX/codeComponent
import { SupabaseTableCollection } from "../../CodeComponents/DisplayCollections"; // plasmic-import: WU9IqrCYlG/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_supabase.module.css"; // plasmic-import: i6YZmFxPJB69NEUgdf79ap/projectcss
import sty from "./PlasmicTestPage.module.css"; // plasmic-import: eC7JXGexcD/css

import DeleteIcon from "./icons/PlasmicIcon__Delete"; // plasmic-import: PpzwRy7oA/icon
import EditIcon from "./icons/PlasmicIcon__Edit"; // plasmic-import: VtZz2Tcp6/icon

export type PlasmicTestPage__VariantMembers = {};

export type PlasmicTestPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestPage__VariantsArgs;
export const PlasmicTestPage__VariantProps = new Array<VariantPropType>();

export type PlasmicTestPage__ArgsType = {};
type ArgPropType = keyof PlasmicTestPage__ArgsType;
export const PlasmicTestPage__ArgProps = new Array<ArgPropType>();

export type PlasmicTestPage__OverridesType = {
  root?: p.Flex<"div">;
  supabaseQuery?: p.Flex<typeof SupabaseQuery>;
  supabaseGridCollection?: p.Flex<typeof SupabaseGridCollection>;
  supabaseImgField?: p.Flex<typeof SupabaseImgField>;
  img?: p.Flex<typeof p.PlasmicImg>;
  supabaseTableCollection?: p.Flex<typeof SupabaseTableCollection>;
};

export interface DefaultTestPageProps {}

function PlasmicTestPage__RenderFunc(props: {
  variants: PlasmicTestPage__VariantsArgs;
  args: PlasmicTestPage__ArgsType;
  overrides: PlasmicTestPage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <SupabaseQuery
            data-plasmic-name={"supabaseQuery"}
            data-plasmic-override={overrides.supabaseQuery}
            className={classNames("__wab_instance", sty.supabaseQuery)}
            columns={"mountain, location, imageUrl" as const}
            tableName={"mountains" as const}
          >
            <SupabaseGridCollection
              data-plasmic-name={"supabaseGridCollection"}
              data-plasmic-override={overrides.supabaseGridCollection}
              className={classNames(
                "__wab_instance",
                sty.supabaseGridCollection
              )}
              columnGap={16 as const}
              columns={4 as const}
              loading={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___95Wq0
                    )}
                  >
                    {"Loading..."}
                  </div>

                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/supabase/images/loadingIconjpeg.gif",
                      fullWidth: 800,
                      fullHeight: 600,
                      aspectRatio: undefined
                    }}
                  />
                </React.Fragment>
              }
              rowGap={16 as const}
              testLoading={false}
            >
              <SupabaseTextField
                className={classNames(
                  "__wab_instance",
                  sty.supabaseTextField__awLuC
                )}
                name={"{{row.mountain}}" as const}
              />

              <SupabaseTextField
                className={classNames(
                  "__wab_instance",
                  sty.supabaseTextField__iA3Zs
                )}
                name={"{{row.location}}" as const}
              />

              <SupabaseImgField
                data-plasmic-name={"supabaseImgField"}
                data-plasmic-override={overrides.supabaseImgField}
                className={classNames("__wab_instance", sty.supabaseImgField)}
                url={"{{row.imageUrl}}" as const}
              />

              <SupabaseDeleteButton
                className={classNames(
                  "__wab_instance",
                  sty.supabaseDeleteButton__m0Nkx
                )}
                id={"{{row.id}}" as const}
                modal={
                  <SupabaseMutation
                    className={classNames(
                      "__wab_instance",
                      sty.supabaseMutation__rkMst
                    )}
                    filters={[
                      {
                        name: "eq",
                        args: [{ column: "id", value: "{{row.id}}" }]
                      }
                    ]}
                    method={"delete" as const}
                    redirectOnSuccess={"/test-page" as const}
                    tableName={"mountains" as const}
                  >
                    <SupabaseModal
                      className={classNames(
                        "__wab_instance",
                        sty.supabaseModal__dnTr
                      )}
                      showModal={false}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3SMd6
                        )}
                      >
                        {"Placeholder"}
                      </div>

                      <SupabaseTextField
                        className={classNames(
                          "__wab_instance",
                          sty.supabaseTextField___2DtA
                        )}
                        name={"{{row.mountain}}" as const}
                      />
                    </SupabaseModal>
                  </SupabaseMutation>
                }
              >
                <DeleteIcon
                  className={classNames(projectcss.all, sty.svg__erwQf)}
                  role={"img"}
                />
              </SupabaseDeleteButton>
            </SupabaseGridCollection>

            <SupabaseTableCollection
              data-plasmic-name={"supabaseTableCollection"}
              data-plasmic-override={overrides.supabaseTableCollection}
              canDelete={true}
              canEdit={true}
              className={classNames(
                "__wab_instance",
                sty.supabaseTableCollection
              )}
              columns={"mountain,location,imageUrl" as const}
              deleteSlot={
                <SupabaseDeleteButton
                  className={classNames(
                    "__wab_instance",
                    sty.supabaseDeleteButton___050Bz
                  )}
                  id={"{{row.id}}" as const}
                  modal={
                    <SupabaseMutation
                      className={classNames(
                        "__wab_instance",
                        sty.supabaseMutation__eqaHo
                      )}
                      filters={[
                        {
                          name: "eq",
                          args: [{ column: "id", value: "{{row.id}}" }]
                        }
                      ]}
                      method={"delete" as const}
                      redirectOnSuccess={"/test-page" as const}
                      tableName={"mountains" as const}
                    >
                      <SupabaseModal
                        className={classNames(
                          "__wab_instance",
                          sty.supabaseModal__w50AQ
                        )}
                        showModal={false}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___192Kd
                          )}
                        >
                          {"Placeholder"}
                        </div>

                        <SupabaseTextField
                          className={classNames(
                            "__wab_instance",
                            sty.supabaseTextField___2DtA
                          )}
                          name={"{{row.mountain}}" as const}
                        />
                      </SupabaseModal>
                    </SupabaseMutation>
                  }
                >
                  <DeleteIcon
                    className={classNames(projectcss.all, sty.svg__mslsi)}
                    role={"img"}
                  />
                </SupabaseDeleteButton>
              }
              editSlot={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eCpiE
                    )}
                  >
                    {"Placeholder"}
                  </div>

                  <EditIcon
                    className={classNames(projectcss.all, sty.svg___64J5P)}
                    role={"img"}
                  />
                </React.Fragment>
              }
              loading={"Loading..."}
            />
          </SupabaseQuery>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "supabaseQuery",
    "supabaseGridCollection",
    "supabaseImgField",
    "img",
    "supabaseTableCollection"
  ],
  supabaseQuery: [
    "supabaseQuery",
    "supabaseGridCollection",
    "supabaseImgField",
    "img",
    "supabaseTableCollection"
  ],
  supabaseGridCollection: ["supabaseGridCollection", "supabaseImgField", "img"],
  supabaseImgField: ["supabaseImgField"],
  img: ["img"],
  supabaseTableCollection: ["supabaseTableCollection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  supabaseQuery: typeof SupabaseQuery;
  supabaseGridCollection: typeof SupabaseGridCollection;
  supabaseImgField: typeof SupabaseImgField;
  img: typeof p.PlasmicImg;
  supabaseTableCollection: typeof SupabaseTableCollection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestPage__VariantsArgs;
    args?: PlasmicTestPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTestPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTestPage__ArgProps,
      internalVariantPropNames: PlasmicTestPage__VariantProps
    });

    return PlasmicTestPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestPage";
  } else {
    func.displayName = `PlasmicTestPage.${nodeName}`;
  }
  return func;
}

export const PlasmicTestPage = Object.assign(
  // Top-level PlasmicTestPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    supabaseQuery: makeNodeComponent("supabaseQuery"),
    supabaseGridCollection: makeNodeComponent("supabaseGridCollection"),
    supabaseImgField: makeNodeComponent("supabaseImgField"),
    img: makeNodeComponent("img"),
    supabaseTableCollection: makeNodeComponent("supabaseTableCollection"),

    // Metadata about props expected for PlasmicTestPage
    internalVariantProps: PlasmicTestPage__VariantProps,
    internalArgProps: PlasmicTestPage__ArgProps
  }
);

export default PlasmicTestPage;
/* prettier-ignore-end */
